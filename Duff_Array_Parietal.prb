geometry = {
    #96: (0,150), #the analog ttl channel
    95: (30,110), #1-9
    94: (40,80),  #1-1
    93: (10,120), #1-20
    92: (10,110), #1-19
    91: (-10,110), #1-29
    90: (-10,120), #1-30
    89: (-30,110), #1-39
    88: (-30,120), #1-40
    87: (40,0),  #2-49
    86: (40,10), #2-50
    85: (20,10), #2-60
    84: (20,0), #2-59
    83: (0,10), #2-70
    82: (0,0), #2-69
    81: (0,20),  #2-71
    80: (-20,0), #2-79
    79: (-20,10), #2-80
    78: (-40,0),  #2-89
    77: (-20,20), #2-81
    76: (-40,10), #2-90
    75: (-20,30), #2-82
    74: (-40,20), #2-91
    73: (-20,40), #2-83
    72: (-40,30),  #2-92
    71: (-30,0), #2-84
    70: (-40,40), #2-93
    69: (-30,10), #2-85
    68: (-50,10), #2-94
    67: (-30,20), #2-86
    66: (-50,20), #2-95
    65: (-30,30), #2-87
    64: (-50,30), #2-96
    63: (20,90), #1-12
    62: (30,120), #1-10
    61: (0,100), #1-23
    60: (20,80), #1-11
    59: (0,90), #1-22
    58: (0,80), #0-21
    57: (-20,90), #1-32
    56: (-20,80), #1-31
    55: (-40,90), #0-42
    54: (-40,80), #1-41
    53: (-20,110), #1-34
    52: (40,20), #2-51
    51: (-20,100), #1-33
    50: (40,30), #2-52
    49: (-40,110), #1-44
    48: (20,20), #2-61
    47: (30,10), #2-55
    46: (20,30), #2-62
    45: (-40,100), #1-43 
    44: (0,30), #2-72
    43: (40,40), #2-53
    42: (20,40), #2-63
    41: (30,0), #2-54
    40: (0,40), #2-73
    39: (10,0), #2-64
    38: (-10,0), #2-74
    37: (10,10), #2-65
    36: (-10,10), #2-75
    35: (10,20), #2-66
    34: (-10,20), #2-76
    33: (10,30), #2-67
    32: (-10,30), #2-77
    31: (40, 90), #1-2
    30: (20, 100), #1-13
    29: (40, 100), #1-3
    28: (20, 110), #0-14
    27: (40, 110), #1-4
    26: (20, 120), #1-15
    25: (40, 120), #1-5
    24: (0, 120), #1-25
    23: (30, 80), #1-6
    22: (-10, 80), #1-26
    21: (30, 90), #0-7
    20: (0, 110), #1-24
    19: (10, 80), #1-16
    18: (-20, 120), #0-35
    17: (30, 100), #1-8
    16: (-50, 90), #1-46
    15: (10, 90), #1-17
    14: (-40, 120), #1-45
    13: (10, 100), #1-18
    12: (-30, 80), #1-36
    11: (-10, 90), #1-27
    10: (-30, 90), #1-37
    9: (-10, 100), #0-28
    8: (-50, 100), #1-47
    7: (-30, 100), #1-38
    6: (30, 30), #2-57
    5: (-50, 110), #1-48
    4: (30, 20), #2-56
    3: (30, 40), #2-58
    2: (10, 40), #2-68
    1: (-30, 40), #2-88
    0: (-10, 40), #2-78
    }

Array_list = ['2-78','2-88','2-68', '2-58', '2-56', '1-48', '2-57', '1-38', '1-47', '0-28', '1-37', '1-27', '1-36', '1-18',\
    '1-45', '1-17', '1-46', '1-8', '0-35', '1-16', '1-24', '0-7', '1-26', '1-6', '1-25', '1-5', '1-15', '1-4', '0-14', '1-3',\
     '1-13', '1-2', '2-77', '2-67', '2-76', '2-66', '2-75', '2-65', '2-74', '2-64', '2-73', '2-54', '2-63', '2-53', '2-72', '1-43',\
     '2-62', '2-55', '2-61', '1-44', '2-52', '1-33', '2-51', '1-34', '1-41', '0-42', '1-31', '1-32', '0-21', '1-22', '1-11',\
     '1-23', '1-10', '1-12', '2-96', '2-87', '2-95', '2-86', '2-94', '2-85', '2-93', '2-84', '2-92', '2-83', '2-91', '2-82',\
     '2-90', '2-81', '2-89', '2-80', '2-79', '2-71', '2-69', '2-70', '2-59', '2-60', '2-50', '2-49', '1-40', '1-39', '1-30',\
     '1-29', '1-19', '1-20', '1-1', '1-9']

dead_electrodes = ['1-44','2-67','2-54']

parietal = []
frontal = []
for i,electrode in enumerate(Array_list):
    if int(electrode[0]) < 2 and electrode not in dead_electrodes:
        frontal.append(i)
    elif int(electrode[0]) == 2 and electrode not in dead_electrodes:
        parietal.append(i)

def adjacency_finder(channel_vect,geometry):
    #channel_vect = range(96)
    graph_temp = []
    for channel in channel_vect:
        for channels in channel_vect:
            if abs(geometry[channel][0] - geometry[channels][0]) < 11 \
                    and abs(geometry[channel][1] - geometry[channels][1]) < 11 \
                    and geometry[channel] != geometry[channels]:
                graph_temp.append((channel, channels))
    return graph_temp

#graph_frontal = adjacency_finder(frontal,geometry)
graph_parietal = adjacency_finder(parietal,geometry)

def create_geometry(channel_vect,geometry):
    temp_dict = dict()
    for x in channel_vect:
        temp_dict.update({x:geometry[x]})
    return temp_dict

#geo_frontal = create_geometry(frontal,geometry)
geo_parietal = create_geometry(parietal,geometry)

channel_groups = {
    # Shank index.
    0:
        {
        # List of channels to keep for spike detection.
        # channel 97 is in the dat. this is the analog trace...might be a problem
        #'channels': list(range(96)),
        'channels': list(parietal),

        # Adjacency graph. Dead channels will be automatically discarded
        # by considering the corresponding subgraph.
        'graph' : graph_parietal,

        # 2D positions of the channels, only for visualization purposes
        # in KlustaViewa. The unit doesn't matter.
        'geometry' : geo_parietal,

        },
}
